{"version":3,"sources":["hours.js","App.js","serviceWorker.js","index.js"],"names":["msToTime","ms","document","getElementById","value","hrs","Math","floor","msmin","hoursRest","min","mssec","minutesRest","sec","innerHTML","Hours","state","className","id","type","name","onKeyUp","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAEA,SAASA,IACL,IAAIC,EAAKC,SAASC,eAAe,YAAYC,MAKzCC,EAAMC,KAAKC,MAAMN,EAFTO,MAGRC,EAAYR,EAHJO,KAIRE,EAAMJ,KAAKC,MAAME,EALTE,KAMRC,EAAcH,EANNE,IAORE,EAAMP,KAAKC,MAAMK,EART,KAUZP,EAAOA,EAAM,GAAM,IAAMA,EAAMA,EAC/BK,EAAOA,EAAM,GAAM,IAAMA,EAAMA,EAC/BG,EAAOA,EAAM,GAAM,IAAMA,EAAMA,EAE/BX,SAASC,eAAe,QAAQW,UAAYT,EAC5CH,SAASC,eAAe,UAAUW,UAAYJ,EAC9CR,SAASC,eAAe,WAAWW,UAAYD,E,IAiCpCE,E,2MA5BXC,MAAQ,G,wEAEJ,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,YACX,2BAAOC,GAAG,WAAWC,KAAK,SAASC,KAAK,KAAKC,QAASrB,IAEtD,yBAAKiB,UAAU,YACX,yBAAKA,UAAU,SAAQ,0BAAMC,GAAG,SAAc,0BAAMD,UAAU,SAAhB,MAC9C,yBAAKA,UAAU,SAAQ,0BAAMC,GAAG,WAAgB,0BAAMD,UAAU,UAAhB,KAAhD,KACA,yBAAKA,UAAU,SAAQ,0BAAMC,GAAG,YAAhC,MAGJ,yBAAKD,UAAU,YACX,yBAAKA,UAAU,SAAf,SACA,yBAAKA,UAAU,SAAf,WACA,yBAAKA,UAAU,SAAf,kB,GAlBJK,aCRLC,G,uLATX,OACE,6BACE,kBAAC,EAAD,W,GAJUD,cCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAASC,eAAe,SD2H3C,kBAAmB4B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.20fdb19e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nfunction msToTime() {\r\n    var ms = document.getElementById(\"compteur\").value\r\n    let mssec = 1000\r\n    let msmin = mssec * 60\r\n    let mshrs = msmin * 60\r\n\r\n    let hrs = Math.floor(ms / mshrs)\r\n    let hoursRest = ms % mshrs\r\n    let min = Math.floor(hoursRest / msmin)\r\n    let minutesRest = hoursRest % msmin\r\n    let sec = Math.floor(minutesRest / mssec)\r\n\r\n    hrs = (hrs < 10) ? \"0\" + hrs : hrs;\r\n    min = (min < 10) ? \"0\" + min : min;\r\n    sec = (sec < 10) ? \"0\" + sec : sec;\r\n\r\n    document.getElementById(\"hour\").innerHTML = hrs;\r\n    document.getElementById(\"Minute\").innerHTML = min;\r\n    document.getElementById(\"seconde\").innerHTML = sec;\r\n}\r\n\r\nclass Hours extends Component {\r\n\r\n    state = {}\r\n    render() {\r\n        return (\r\n            <div className=\"time-hour\" >\r\n                <div className=\"time-app\">\r\n                    <input id=\"compteur\" type=\"number\" name=\"ms\" onKeyUp={msToTime} />\r\n\r\n                    <div className=\"app-time\">\r\n                        <div className=\"item1\"><span id=\"hour\"></span><span className=\"text1\">:</span></div>\r\n                        <div className=\"item2\"><span id=\"Minute\"></span><span className=\" text2\">:</span> </div>\r\n                        <div className=\"item3\"><span id=\"seconde\"></span> </div>\r\n\r\n                    </div>\r\n                    <div className=\"app-text\">\r\n                        <div className=\"item1\">Hours</div>\r\n                        <div className=\"item2\">Minutes</div>\r\n                        <div className=\"item3\">Seconds</div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div >\r\n\r\n\r\n        );\r\n\r\n    }\r\n}\r\nexport default Hours;","import React, { Component } from 'react';\nimport Hours from './hours';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Hours />\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}